#!/usr/bin/env bash

# get scripts base regardless of execution location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
scriptsBase="$(dirname "$SOURCE")"
. "$scriptsBase/init"

function applyPatches {
	local target="$1"
	local patch_folder="$2"
	
	echo ""
	delete "$basedir/$target" mkdir
	
    cd "$basedir/$target"
    git init > /dev/null 2>&1
	
	if [[ "$target" ==  "${NAME}-Server" ]]; then
		# Reset to minecraft source
		cp -r "$quiltFlower/minecraft/src" ./
		git add . > /dev/null 2>&1
		git commit -m "Created $1" > /dev/null 2>&1
	fi
	
    # Disable GPG signing before AM, slows things down and doesn't play nicely.
    # There is also zero rational or logical reason to do so for these sub-repo AMs.
    # Calm down kids, it's re-enabled (if needed) immediately after, pass or fail.
    git config commit.gpgsign false
	
	# Apply patch and debugging if the patches is applied cleanly or not.
	echo "  Applying patches to $target..."
	echo ""
    
	git am --abort >/dev/null 2>&1
    git am --3way --whitespace=fix "$basedir/patches/$patch_folder/"*.patch
	
    if [ "$?" != "0" ]; then
		echo ""
		echo "       Something did not apply cleanly to $target."
		echo "  Please review above details to find a way to resolve that"
    else
		echo ""
        echo "  Patches applied cleanly to $target"
    fi
}

(
	
	cd "$basedir"
	echo ""
	echo "Rebuilding Forked projects.... " 
	
	applyPatches "${NAME}-Server" "server"
	applyPatches "${NAME}-API" "api"
	enableCommitSigning
	
) || (
	
    echo "Failed to apply patches"
    enableCommitSigning
    exit 1
	
) || exit 1