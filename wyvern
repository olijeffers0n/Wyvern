#!/usr/bin/env bash

# get scripts base regardless of execution location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
scriptsBase="$(dirname "$SOURCE")/scripts"
. "$scriptsBase/init"

set -e
case "$1" in
    "install")
		if [[ "$2" != "skip" ]]; then
			"$scriptsBase/build" "$2"
		fi
		mvn clean install
    ;;
    "package")
		if [[ "$2" != "skip" ]]; then
			"$scriptsBase/build" "$2"
		fi
		mvn clean package
    ;;
    "build")
		if [[ "$2" != "skip" ]]; then
			"$scriptsBase/build" "$2"
		fi
		mvn -N install
		(cd "${NAME}-API" && mvn clean install)
		(cd "${NAME}-Server" && mvn clean package)
    ;;
    "apply" | "patch")
		"$scriptsBase/build" "$2"
    ;;
    "rb")
		"$scriptsBase/rebuildpatches"
    ;;
    "update")
		"$scriptsBase/update" "$2" "$3"
    ;;
    "push")
		echo ""
		git push -u --force origin master
			
		echo ""
        echo "  Pushed repository to github."
    ;;
    *)
		echo "We focus on enhancing vanilla Minecraft without sacrificing any behavior or features. You can think of this project as vanilla Minecraft, but with even more optimization and higher performance."
		echo ""
		echo "List of commands:"
		echo "  install  │  compile & install ${NAME}-API and ${NAME}-Server to local repository"
		echo "  package  │  compile ${NAME}-API & ${NAME}-Server to the target folder"
		echo "  build    │  install ${NAME}-API & compile ${NAME}-Server to the target folder"
		echo "  apply    │  apply patches on top of Minecraft source"
		echo "  rb       │  rebuild patches"
		echo "  update   │  update the decompiler or the remapper"
	;;
esac
set +e
